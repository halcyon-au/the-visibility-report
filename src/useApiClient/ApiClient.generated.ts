//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class ApiClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * Find closest block to website for countryname
     * @param countryname Country Name
     * @param website Website
     * @return OK
     */
    blocked(countryname: string, website: string , cancelToken?: CancelToken | undefined): Promise<ApiResponse<GetBlockedResponse>> {
        let url_ = this.baseUrl + "/api/v1/blocked/{countryname}/{website}";
        if (countryname === undefined || countryname === null)
            throw new Error("The parameter 'countryname' must be defined.");
        url_ = url_.replace("{countryname}", encodeURIComponent("" + countryname));
        if (website === undefined || website === null)
            throw new Error("The parameter 'website' must be defined.");
        url_ = url_.replace("{website}", encodeURIComponent("" + website));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBlocked(_response);
        });
    }

    protected processBlocked(response: AxiosResponse): Promise<ApiResponse<GetBlockedResponse>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ApiResponse<GetBlockedResponse>>(new ApiResponse<GetBlockedResponse>(status, _headers, result200));

        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = JSON.parse(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApiResponse<GetBlockedResponse>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * Retrieve All Countries Ranked (Lower the number the worse)
     * @return OK
     */
    rankingsAll(  cancelToken?: CancelToken | undefined): Promise<ApiResponse<CountryScore[]>> {
        let url_ = this.baseUrl + "/api/v1/countries/rankings";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRankingsAll(_response);
        });
    }

    protected processRankingsAll(response: AxiosResponse): Promise<ApiResponse<CountryScore[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ApiResponse<CountryScore[]>>(new ApiResponse<CountryScore[]>(status, _headers, result200));

        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = JSON.parse(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApiResponse<CountryScore[]>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * Retrieve Country Details
     * @param country Country Name
     * @return OK
     */
    rankings(country: string , cancelToken?: CancelToken | undefined): Promise<ApiResponse<CountryScoreWBlocked>> {
        let url_ = this.baseUrl + "/api/v1/countries/rankings/{country}";
        if (country === undefined || country === null)
            throw new Error("The parameter 'country' must be defined.");
        url_ = url_.replace("{country}", encodeURIComponent("" + country));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRankings(_response);
        });
    }

    protected processRankings(response: AxiosResponse): Promise<ApiResponse<CountryScoreWBlocked>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ApiResponse<CountryScoreWBlocked>>(new ApiResponse<CountryScoreWBlocked>(status, _headers, result200));

        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = JSON.parse(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApiResponse<CountryScoreWBlocked>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * Perform a Hearbeat
     * @return OK
     */
    hb(  cancelToken?: CancelToken | undefined): Promise<ApiResponse<{ [key: string]: string; }>> {
        let url_ = this.baseUrl + "/api/v1/hb";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHb(_response);
        });
    }

    protected processHb(response: AxiosResponse): Promise<ApiResponse<{ [key: string]: string; }>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ApiResponse<{ [key: string]: string; }>>(new ApiResponse<{ [key: string]: string; }>(status, _headers, result200));

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApiResponse<{ [key: string]: string; }>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * find closest match to website for countryname, if there is match in blocked/unblocked return blocked/unblocked else return unknown
     * @param countryname Country Name
     * @param website Website
     * @return OK
     */
    status(countryname: string, website: string , cancelToken?: CancelToken | undefined): Promise<ApiResponse<GetStatusResponse>> {
        let url_ = this.baseUrl + "/api/v1/status/{countryname}/{website}";
        if (countryname === undefined || countryname === null)
            throw new Error("The parameter 'countryname' must be defined.");
        url_ = url_.replace("{countryname}", encodeURIComponent("" + countryname));
        if (website === undefined || website === null)
            throw new Error("The parameter 'website' must be defined.");
        url_ = url_.replace("{website}", encodeURIComponent("" + website));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processStatus(_response);
        });
    }

    protected processStatus(response: AxiosResponse): Promise<ApiResponse<GetStatusResponse>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ApiResponse<GetStatusResponse>>(new ApiResponse<GetStatusResponse>(status, _headers, result200));

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = JSON.parse(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApiResponse<GetStatusResponse>>(new ApiResponse(status, _headers, null as any));
    }
}

export interface CountryScore {
    countryName?: string | undefined;
    ranking?: number | undefined;
    score?: number | undefined;
}

export interface CountryScoreWBlocked {
    blockedWebsites?: string[] | undefined;
    countryName?: string | undefined;
    possibleWebsites?: string[] | undefined;
    ranking?: number | undefined;
    score?: number | undefined;
    unblockedWebsites?: string[] | undefined;
    websites?: string[] | undefined;
}

export interface GetBlockedResponse {
    isBlocked?: boolean | undefined;
    matchedWith?: string | undefined;
    similarity?: number | undefined;
}

export interface GetStatusResponse {
    isBlocked?: boolean | undefined;
    matchedWith?: string | undefined;
    similarity?: number | undefined;
    status?: string | undefined;
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;

        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }

        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T | null {
  if (!mappings)
    mappings = [];
  if (!data)
    return null;

  const mappingIndexName = "__mappingIndex";
  if (data[mappingIndexName])
    return <T>mappings[data[mappingIndexName]].target;

  data[mappingIndexName] = mappings.length;

  let result: any = new type();
  mappings.push({ source: data, target: result });
  result.init(data, mappings);
  return result;
}

export class ApiResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult)
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new ApiException(message, status, response, headers, result);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}
