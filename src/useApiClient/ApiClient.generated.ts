//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Find closest block to website for countryname
     * @param countryname Country Name
     * @param website Website
     * @return OK
     */
    blocked(countryname: string, website: string): Promise<ApiResponse<GetBlockedResponse>> {
        let url_ = this.baseUrl + "/api/v1/blocked/{countryname}/{website}";
        if (countryname === undefined || countryname === null)
            throw new Error("The parameter 'countryname' must be defined.");
        url_ = url_.replace("{countryname}", encodeURIComponent("" + countryname));
        if (website === undefined || website === null)
            throw new Error("The parameter 'website' must be defined.");
        url_ = url_.replace("{website}", encodeURIComponent("" + website));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBlocked(_response);
        });
    }

    protected processBlocked(response: Response): Promise<ApiResponse<GetBlockedResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as GetBlockedResponse;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as { [key: string]: string; };
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<GetBlockedResponse>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * Retrieve All Countries Ranked (Lower the number the worse)
     * @return OK
     */
    rankingsAll(): Promise<ApiResponse<CountryScore[]>> {
        let url_ = this.baseUrl + "/api/v1/countries/rankings";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRankingsAll(_response);
        });
    }

    protected processRankingsAll(response: Response): Promise<ApiResponse<CountryScore[]>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CountryScore[];
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as { [key: string]: string; };
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<CountryScore[]>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * Retrieve Country Details
     * @param country Country Name
     * @return OK
     */
    rankings(country: string): Promise<ApiResponse<CountryScoreWBlocked>> {
        let url_ = this.baseUrl + "/api/v1/countries/rankings/{country}";
        if (country === undefined || country === null)
            throw new Error("The parameter 'country' must be defined.");
        url_ = url_.replace("{country}", encodeURIComponent("" + country));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRankings(_response);
        });
    }

    protected processRankings(response: Response): Promise<ApiResponse<CountryScoreWBlocked>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CountryScoreWBlocked;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            result500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as { [key: string]: string; };
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<CountryScoreWBlocked>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * Perform a Hearbeat
     * @return OK
     */
    hb(): Promise<ApiResponse<{ [key: string]: string; }>> {
        let url_ = this.baseUrl + "/api/v1/hb";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHb(_response);
        });
    }

    protected processHb(response: Response): Promise<ApiResponse<{ [key: string]: string; }>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as { [key: string]: string; };
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<{ [key: string]: string; }>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * find closest match to website for countryname, if there is match in blocked/unblocked return blocked/unblocked else return unknown
     * @param countryname Country Name
     * @param website Website
     * @return OK
     */
    status(countryname: string, website: string): Promise<ApiResponse<GetStatusResponse>> {
        let url_ = this.baseUrl + "/api/v1/status/{countryname}/{website}";
        if (countryname === undefined || countryname === null)
            throw new Error("The parameter 'countryname' must be defined.");
        url_ = url_.replace("{countryname}", encodeURIComponent("" + countryname));
        if (website === undefined || website === null)
            throw new Error("The parameter 'website' must be defined.");
        url_ = url_.replace("{website}", encodeURIComponent("" + website));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStatus(_response);
        });
    }

    protected processStatus(response: Response): Promise<ApiResponse<GetStatusResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as GetStatusResponse;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as { [key: string]: string; };
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<GetStatusResponse>>(new ApiResponse(status, _headers, null as any));
    }
}

export interface CountryScore {
    countryName?: string | undefined;
    ranking?: number | undefined;
    score?: number | undefined;
}

export interface CountryScoreWBlocked {
    blockedWebsites?: string[] | undefined;
    countryName?: string | undefined;
    possibleWebsites?: string[] | undefined;
    ranking?: number | undefined;
    score?: number | undefined;
    unblockedWebsites?: string[] | undefined;
    websites?: string[] | undefined;
}

export interface GetBlockedResponse {
    isBlocked?: boolean | undefined;
    matchedWith?: string | undefined;
    similarity?: number | undefined;
}

export interface GetStatusResponse {
    isBlocked?: boolean | undefined;
    matchedWith?: string | undefined;
    similarity?: number | undefined;
}

export class ApiResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult)
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new ApiException(message, status, response, headers, result);
}
